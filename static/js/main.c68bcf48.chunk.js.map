{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filtredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAsBeA,EApBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAExB,OACD,yBAAKC,UAAU,kDAChB,yBAAKC,IAAI,gBAAgBC,IAAG,+BAA0BH,KACnD,6BAKI,gCAAMF,EAAN,MACD,gCAAMC,EAAN,QCeMK,EAzBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACE,kBAAC,EAAD,CAKAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDPW,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACf,2BAAOD,GAAG,MACRC,UAAU,uCACVW,KAAK,SACLC,YAAY,0BACZC,SAAUH,MCECI,EATA,SAACC,GACf,OACK,yBAAKf,UAAU,UACVe,EAAMC,WCkBFC,E,YApBd,WAAYF,GAAQ,IAAD,8BAClB,4CAAMA,KACDG,MAAQ,CACZC,UAAU,GAHO,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,yDAEAG,KAAKP,MAAMC,a,GAhBMQ,aCuDZC,G,8BA7CZ,aAAc,IAAD,8BACd,+CAcCC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd5C,EAAKZ,MAAQ,CACRd,OAAQ,GACRwB,YAAa,IAJJ,E,iFAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACnB,OAAQ+B,S,+BAS9B,IAAD,OACFC,EAAgBd,KAAKJ,MAAMd,OAAOiC,QAAO,SAAAC,GAC7C,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAGlE,OAAIjB,KAAKJ,MAAMd,OAAOqC,OAInB,0BAAMzC,UAAU,MAChB,2CACA,kBAAC,EAAD,CAAWU,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACQ,kBAAC,EAAD,CAAUtB,OAAQgC,OARvB,wBAAIpC,UAAU,WAAd,e,GA3BO0C,IAAMlB,Y,YCCJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.c68bcf48.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    // we can also destructure within the prameter ()\r\n     return (\r\n\t   <div className=\"tc bg-purple dib bw3 shadow-5 br4 pa3 ma2 grow\">\r\n\t  <img alt=\"this is a pic\" src={`https://robohash.org/${id}`}/>\r\n\t     <div>\r\n     {/*these are empty skeleton that would fill up with the \r\n     CardList Values but in here they are only empty and undefined\r\n   parameters untill we render the page in the cardlist and define\r\n the value from it to this page*/}\r\n       \t  <h2> {name}  </h2>\r\n       \t\t<p>  {email} </p>\r\n         \r\n\t\t   </div>\r\n\t    </div>\r\n       );\r\n    }\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\t\treturn(\r\n\t\t\t<div> \r\n\r\n\t\t\t{ robots.map((user, i) => {\t\t\t\r\n\t\t\treturn( \r\n\t\t\t\t <Card \r\n\t\t\t\t /*these values that we are getting out of the loop\r\n\t\t\t\t are going to be replaced to the parameters we defined \r\n\t\t\t\t to our Card page because Card parmaeters are wating for these \r\n\t\t\t\t values*/\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t  />\r\n\t\t\t       );\r\n\t\t\t\t}) }\r\n\r\n\t\t  </div>\r\n\t\r\n   );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t<input id=\"inp\"\r\n\t\t  className=\"pa3 br3 ba b--black bg-lightest-blue\"\r\n\t\t  type='search' \r\n\t\t  placeholder='search your robots name'\r\n\t\t  onChange={searchChange}\r\n\t\t />\r\n\t\t </div>\r\n\t\t);\r\n     }\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n      <div className=\"scroll\">\r\n          {props.children}      \t\r\n      </div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Ooooops. That is not good</h1>\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n// import {robots} from './robots';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport '../components/SearchBox.css';\r\nimport '../components/Card.css';\r\nimport '../components/Scroll.css';\r\n\r\n\r\nclass App extends React.Component {\r\n   constructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t      robots: [],\r\n\t      searchfield: ''\r\n         }\r\n\t  }\r\n\r\n\t  componentDidMount(){\r\n\t  \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t  \t.then(response => response.json())\r\n\t  \t.then(users => this.setState({robots: users}))\r\n\t  }\r\n\r\n\r\n\t  onSearchChange = (event) => {\r\n\t  \tthis.setState({ searchfield: event.target.value })      \r\n\t    }\r\n\r\n\r\n\t\trender() {\r\n\t\t\tconst filtredRobots = this.state.robots.filter(robot => {\r\n\t  \t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t       });\r\n\t\t\t\r\n\t\t\tif(!this.state.robots.length) {\r\n\t\t\t\treturn <h1 className=\"tc pink\">LOADING</h1>\r\n\t\t\t} else {\t\t\r\n\t\treturn (\r\n\t\t\t\t  <main className=\"tc\">\r\n\t\t\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t  <ErrorBoundry>\r\n\t\t\t\t            <CardList robots={filtredRobots}/>\r\n\t\t\t\t          </ErrorBoundry>\r\n\t\t\t\t        </Scroll>\r\n\t\t\t\t  </main>\r\n\t\t       );\r\n\t\t  }\r\n   \t  }\r\n  }\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport './containers/App.css';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n\t<App />\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}